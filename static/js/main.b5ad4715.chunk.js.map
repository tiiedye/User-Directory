{"version":3,"sources":["utils/API.js","components/FilteredUserRender.js","components/UserRender.js","components/DisplayUsers.js","components/SearchForm.js","components/Form.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","styles","imgMargin","marginRight","FilteredUserRender","props","results","map","result","alt","name","last","className","src","picture","thumbnail","style","first","email","login","username","registered","date","UserRender","DisplayUsers","filteredResults","length","input","width","SearchForm","value","search","onChange","handleInputChange","type","placeholder","onClick","handleFormSubmit","Form","state","searchUser","API","then","setState","data","catch","err","console","log","event","target","inputValue","filter","item","includes","preventDefault","this","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b5ad4715.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n    imgMargin: {\r\n        marginRight: \"50px\"\r\n    }\r\n}\r\n\r\nfunction FilteredUserRender(props) {\r\n        return(\r\n            <tbody>\r\n                <table>\r\n                    <tr>\r\n                        <th>\r\n                            Avatar\r\n                        </th>\r\n                        <th>\r\n                            Name\r\n                        </th>\r\n                        <th>\r\n                            Email\r\n                        </th>\r\n                        <th>\r\n                            Username\r\n                        </th>\r\n                        <th>\r\n                            Registered\r\n                        </th>\r\n                    </tr>\r\n                    {props.results.map(result => (\r\n                        <tr>\r\n                            <td>\r\n                                <img alt={result.name.last} className=\"img-fluid\" src={result.picture.thumbnail} style={styles.imgMargin} />\r\n                            </td>\r\n                            <td>\r\n                                {result.name.first} {result.name.last}\r\n                            </td>\r\n                            <td>\r\n                                {result.email}\r\n                            </td>\r\n                            <td>\r\n                                {result.login.username}\r\n                            </td>\r\n                            <td>\r\n                                {result.registered.date}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n            </tbody>\r\n        )\r\n}\r\n\r\nexport default FilteredUserRender;","import React from \"react\";\r\n\r\nconst styles = {\r\n    imgMargin: {\r\n        marginRight: \"50px\"\r\n    }\r\n}\r\n\r\nfunction UserRender(props) {\r\n        return(\r\n            <tbody>\r\n                <table>\r\n                    <tr>\r\n                        <th>\r\n                            Avatar\r\n                        </th>\r\n                        <th>\r\n                            Name\r\n                        </th>\r\n                        <th>\r\n                            Email\r\n                        </th>\r\n                        <th>\r\n                            Username\r\n                        </th>\r\n                        <th>\r\n                            Registered\r\n                        </th>\r\n                    </tr>\r\n                    {props.results.map(result => (\r\n                        <tr>\r\n                            <td>\r\n                                <img alt={result.name.last} className=\"img-fluid\" src={result.picture.thumbnail} style={styles.imgMargin} />\r\n                            </td>\r\n                            <td>\r\n                                {result.name.first} {result.name.last}\r\n                            </td>\r\n                            <td>\r\n                                {result.email}\r\n                            </td>\r\n                            <td>\r\n                                {result.login.username}\r\n                            </td>\r\n                            <td>\r\n                                {result.registered.date}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n            </tbody>\r\n        )\r\n}\r\n\r\nexport default UserRender;","import React from \"react\";\r\nimport FilteredUserRender from \"./FilteredUserRender\"\r\nimport UserRender from \"./UserRender\"\r\n\r\nfunction DisplayUsers(props) {\r\n    if (props.filteredResults.length === 0) {\r\n        return (\r\n            <UserRender\r\n                results={props.results}\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <FilteredUserRender\r\n                results={props.filteredResults}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayUsers","import React from \"react\";\r\n\r\nconst styles = {\r\n    input: {\r\n        width: \"500px\"\r\n    }\r\n}\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form className=\"form\">\r\n            <input\r\n                className=\"form-control\"\r\n                style={styles.input}\r\n                value={props.search}\r\n                name=\"search\"\r\n                onChange={props.handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Search for a User\"\r\n            />\r\n            <button className=\"btn btn-primary\" onClick={props.handleFormSubmit}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API.js\"\r\nimport DisplayUsers from \"./DisplayUsers\"\r\nimport SearchForm from \"./SearchForm.js\"\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        filteredResults: []\r\n    };\r\n\r\n    searchUser = () => {\r\n      API.search()\r\n          .then(results => this.setState({ results: results.data.results }))\r\n          .catch(err => console.log(err));\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.searchUser();\r\n    }\r\n\r\n\r\n\r\n    handleInputChange = event => {\r\n      let value = event.target.value;\r\n      const name = event.target.name;\r\n      this.setState({\r\n        [name]: value\r\n      })\r\n\r\n      const inputValue = event.target.value\r\n\r\n      const filteredResults = this.state.results.filter(item => {\r\n        return item.name.first.includes(inputValue)\r\n        // console.log(item.name.first)\r\n        // console.log(inputValue)\r\n      });\r\n\r\n      console.log(filteredResults)\r\n\r\n      this.setState({\r\n        filteredResults: filteredResults\r\n      })\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.searchUser(this.state.search);\r\n    };\r\n\r\n\r\n    \r\n    render() {\r\n        return (\r\n          <div>\r\n            <SearchForm\r\n              search={this.state.search}\r\n              handleFormSubmit={this.handleFormSubmit}\r\n              handleInputChange={this.handleInputChange}\r\n             />\r\n            <p></p>\r\n            \r\n            <div className=\"card\">\r\n              <h5 className=\"card-header\">Users</h5>\r\n                  <div className=\"card-body\">\r\n                      <DisplayUsers\r\n                        results={this.state.results}\r\n                        filteredResults={this.state.filteredResults}\r\n                      />\r\n                  </div>\r\n            </div>           \r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Form from \"./Form.js\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"display-4\">User Database</h1>\r\n\r\n            <p className=\"lead\">Welcome to our User Database!</p>\r\n            <hr className=\"my-4\" />\r\n            <p>Type in a name to begin your search</p>\r\n            <Form />\r\n        </div>\r\n\r\n    );\r\n  }\r\n  \r\n  export default Header;","import React from 'react';\nimport Header from './components/Header.js'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}